{
	"info": {
		"_postman_id": "bda0b167-fdf3-489c-a52c-a2159a9d7c2c",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Customer",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"\r",
									"pm.test(\"Valid token is generated\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "frinx",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{KEYCLOAK}}/auth/realms/vodafoneziggo/protocol/openid-connect/token",
							"host": [
								"{{KEYCLOAK}}"
							],
							"path": [
								"auth",
								"realms",
								"vodafoneziggo",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Checks if active environment is DEV env\", () => {\r",
									"  pm.expect(pm.environment.name).to.eql(\"DEV env\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{TMF}}/api/customers",
							"host": [
								"{{TMF}}"
							],
							"path": [
								"api",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"customer_id\", jsonData.id);\r",
									"\r",
									"pm.test(\"Customer is created\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "text/plain",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept-Charset",
								"value": "utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"testomer\",\r\n  \"contact_name\": \"testomer\",\r\n  \"contact_phone\": \"testomer\",\r\n  \"contact_email\": \"testomer\"\r\n}"
						},
						"url": {
							"raw": "{{TMF}}/api/customers",
							"host": [
								"{{TMF}}"
							],
							"path": [
								"api",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "text/plain",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept-Charset",
								"value": "utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{customer_id}},  \r\n  \"name\": \"Slobo\",\r\n  \"contact_name\": \"slobo\",\r\n  \"contact_phone\": \"slobo\",\r\n  \"contact_email\": \"slobo\"\r\n}"
						},
						"url": {
							"raw": "{{TMF}}/api/customers/{{customer_id}}",
							"host": [
								"{{TMF}}"
							],
							"path": [
								"api",
								"customers",
								"{{customer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.test(\"Test data type of the response\", () => {\r",
									"//     const jsonData = pm.response.json();\r",
									"  \r",
									"//   pm.expect(jsonData).to.be.an(\"object\");\r",
									"  \r",
									"// //  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"// //  pm.expect(jsonData.locations).to.be.an(\"array\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response time is less than 100ms\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"// });\r",
									"\r",
									"// pm.test(\"response must be valid and have a body\", function () {\r",
									"//      pm.response.to.be.ok;\r",
									"//      pm.response.to.be.withBody;\r",
									"//      pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Body contains string\",() => {\r",
									"//   pm.expect(pm.response.text()).to.include(\"customer_id\");\r",
									"// });\r",
									"\r",
									"// // pm.test(\"Status code is 403\", function () {\r",
									"// //    pm.response.to.have.status(403);\r",
									"// //});\r",
									"\r",
									"// pm.test(\"Check the active environment\", () => {\r",
									"//   pm.expect(pm.environment.name).to.eql(\"DEV env\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Content-Type header is application/json; charset=utf-8\", () => {\r",
									"//   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"// });\r",
									"\r",
									"// pm.test(\"Content-Type header is present\", () => {\r",
									"//   pm.response.to.have.header(\"Content-Type\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Server header is present\", () => {\r",
									"//   pm.response.to.have.header(\"Server\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Body contains string\",() => {\r",
									"//   pm.expect(pm.response.text()).to.include(\"name\");\r",
									"//   pm.expect(pm.response.text()).to.include(\"id\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Status code is 401 Unauthorized\", function () {     \r",
									"//     pm.response.to.have.status(401); \r",
									"//     pm.response.to.be.clientError;    \r",
									"//     pm.response.to.be.unauthorized;\r",
									"     \r",
									"// });\r",
									"\r",
									"pm.test(\"This test checks if customer is been updated succesfully\", () => {\r",
									"  const jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.name).to.eql(\"Slobo\");\r",
									"  pm.expect(jsonData.contact_name).to.eql(\"slobo\");\r",
									"  pm.expect(jsonData.contact_phone).to.eql(\"slobo\");\r",
									"  pm.expect(jsonData.contact_email).to.eql(\"slobo\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{TMF}}/api/customers/{{customer_id}}",
							"host": [
								"{{TMF}}"
							],
							"path": [
								"api",
								"customers",
								"{{customer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer ID locations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{TMF}}/api/customers/{{customer_id}}/locations",
							"host": [
								"{{TMF}}"
							],
							"path": [
								"api",
								"customers",
								"{{customer_id}}",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer ID services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{TMF}}/api/customers/{{customer_id}}/services",
							"host": [
								"{{TMF}}"
							],
							"path": [
								"api",
								"customers",
								"{{customer_id}}",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Customer is deleted\", function() \r",
									"{\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "Accept-Charset",
								"value": "utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{TMF}}/api/customers/{{customer_id}}",
							"host": [
								"{{TMF}}"
							],
							"path": [
								"api",
								"customers",
								"{{customer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check customer deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"This test checks if created customer is not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorCode).to.eql(\"ITEM_NOT_FOUND\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"customer_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{TMF}}/api/products/{{customer_id}}",
							"host": [
								"{{TMF}}"
							],
							"path": [
								"api",
								"products",
								"{{customer_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}